% Automatically generated by smt2map




:- pred 'main@mult.exit6.split'.
:- pred 'main@entry'.
:- pred 'main@tailrecurse.i'(int,int,int,int).
:- mode 'main@tailrecurse.i'(in,in,in,in).
:- pred 'main@tailrecurse.outer.i3'(int,int,int,int,int).
:- mode 'main@tailrecurse.outer.i3'(in,in,in,in,in).
:- pred 'main@tailrecurse.outer.i'(int,int,int,int).
:- mode 'main@tailrecurse.outer.i'(in,in,in,in).
:- pred 'main@tailrecurse.i5'(int,int,int,int,int).
:- mode 'main@tailrecurse.i5'(in,in,in,in,in).
:- pred ff.
:- query ff/0.
:- pred constr(bool).
:- mode constr(in).
:- ignore constr/1.

'main@entry' :- constr((true)).
'main@tailrecurse.outer.i'(A,B,C,D) :- 'main@entry', 
          constr((E=(F=or(not(A=<46340),not(A>=0)))&(G=(H=or(not(B=<46340),not(B>=0)))&(E&(I=true&(not(H)&(not(F)&(or(not(I),and(J,I))&(or(not(J),not(I),D=K)&(or(not(J),not(I),C=L)&(or(not(J),not(I),K=B)&(or(not(J),not(I),L=0)&G)))))))))))).
'main@tailrecurse.outer.i'(A,B,C,D) :- 'main@tailrecurse.i'(A,B,E,F), 
          constr((G= - 1*F&(H=true&(and(I,J)&(not(I)&(K= - 1+L&(not(I)&(M=E+A&(not(I)&(and(I,H)&(not(H)&(and(J,N)&(not(J)&(O=(L=0)&(not(J)&(D=P&(not(H)&(not(I)&(C=Q&(not(H)&(not(I)&(P=K&(not(H)&(not(I)&(Q=M&(not(H)&(not(I)&(not(J)&(not(O)&(not(I)&(not(R)&(not(N)&(not(J)&(L=S&(not(N)&(not(J)&(S=F&(not(N)&(not(J)& ~ ((0=<F)=R)))))))))))))))))))))))))))))))))))))))).
'main@tailrecurse.i'(A,B,C,D) :- 'main@tailrecurse.outer.i'(A,B,C,E), 
          constr((F=E&(not(G)&(not(H)&(G=true&(and(H,G)&(not(G)&(D=F&(not(G)&not(H)))))))))).
'main@tailrecurse.i'(A,B,C,D) :- 'main@tailrecurse.i'(A,B,C,E), 
          constr((F= - 1*E&(G=true&(and(H,G)&(not(G)&(I&(not(G)&(not(H)&(D=J&(not(G)&(not(H)&(J=F&(not(G)&(not(H)& ~ ((0=<E)=I))))))))))))))).
'main@tailrecurse.outer.i3'(A,B,C,D,E) :- 'main@tailrecurse.i'(B,C,F,G), 
          constr((H= - 1*G&(I=true&(and(J,K)&(not(J)&(and(J,I)&(not(I)&(and(L,K)&(not(K)&(M=(N=0)&(not(K)&(not(K)&(M&(not(J)&(E=O&(not(I)&(not(J)&(D=P&(not(I)&(not(J)&(P=0&(not(I)&(not(J)&(O=B&(not(I)&(not(J)&(A=Q&(not(K)&(not(J)&(Q=F&(not(K)&(not(J)&(not(K)&(not(L)&(not(R)&(not(K)&(not(L)&(S=G&(not(K)&(N=S&(not(L)& ~ ((0=<G)=R)))))))))))))))))))))))))))))))))))))))))).
'main@tailrecurse.outer.i3'(A,B,C,D,E) :- 'main@tailrecurse.i5'(A,B,C,F,G), 
          constr((H= - 1*G&(I=true&(and(J,K)&(not(J)&(L= - 1+M&(not(J)&(N=F+C&(not(J)&(and(J,I)&(not(I)&(and(K,O)&(not(K)&(P=(M=0)&(not(K)&(not(K)&(not(P)&(not(J)&(E=Q&(not(I)&(not(J)&(D=R&(not(I)&(not(J)&(R=N&(not(I)&(not(J)&(Q=L&(not(I)&(not(J)&(not(S)&(not(O)&(not(K)&(M=T&(not(O)&(not(K)&(T=G&(not(O)&(not(K)& ~ ((0=<G)=S)))))))))))))))))))))))))))))))))))))))).
'main@tailrecurse.i5'(A,B,C,D,E) :- 'main@tailrecurse.outer.i3'(A,B,C,D,F), 
          constr((G=F&(not(H)&(not(I)&(H=true&(and(I,H)&(not(H)&(E=G&(not(H)&not(I)))))))))).
'main@tailrecurse.i5'(A,B,C,D,E) :- 'main@tailrecurse.i5'(A,B,C,D,F), 
          constr((G= - 1*F&(H=true&(and(I,H)&(not(H)&(not(H)&(J&(not(I)&(E=K&(not(H)&(not(I)&(K=G&(not(H)&(not(I)& ~ ((0=<F)=J))))))))))))))).
'main@mult.exit6.split' :- 'main@tailrecurse.i5'(A,B,C,D,E), 
          constr((F=or(not(G),not((B=<0)=H))&(I=or(not(G),not((C=<0)=J))&(K=or(not(G),not((A=L)=M))&(N= - 1*E&(O=true&(or(not(P),and(P,Q))&(or(not(P),R=(S=0))&(or(not(O),and(O,G))&(or(not(G),T)&(or(not(G),and(P,G))&(or(not(G),T=and(U,J))&(or(not(G),U=and(M,H))&(F&(I&(K&(or(not(P),not(Q),not(V))&(or(not(P),not(Q),W=E)&(or(not(P),not(Q),S=W)&(or(not(P),R,not(G))&(or(not(P),L=X,not(G))&(or(not(P),X=D,not(G))&not((0=<E)=V))))))))))))))))))))))).
ff :- 'main@mult.exit6.split', constr((true)).

