% Automatically generated by smt2map




:- pred 'main@entry'(int,array(int),int).
:- mode 'main@entry'(in,in,in).
:- pred 'main@orig.main.exit.split'.
:- pred 'main@.lr.ph'(int,array(int),int).
:- mode 'main@.lr.ph'(in,in,in).
:- pred ff.
:- query ff/0.
:- pred constr(bool).
:- mode constr(in).
:- ignore constr/1.

'main@entry'(A,B,C) :- constr((true)).
'main@.lr.ph'(A,B,C) :- 'main@entry'(A,D,E), 
          constr((and(F=E,and(G=store(D,C,0),and(H=store(G,C,I),and(or(not(J),K,not(L)),and(or(not(L),not(M),N=H),and(or(not(L),not(M),B=N),and(or(not(M),and(L,M)),and(or(not(L),and(L,J)),and(M=true,not((I=<0)=K)))))))))))).
'main@.lr.ph'(A,B,C) :- 'main@.lr.ph'(A,D,C), 
          constr((and(E=select(D,C),and(F=A,and(G= - 1+E,and(H=store(D,C,G),and(or(not(I),not(J),K=H),and(or(not(I),not(J),B=K),and(or(not(I),not(J),L),and(or(not(J),and(I,J)),and(J=true,not((E=<1)=L)))))))))))).
'main@orig.main.exit.split' :- 'main@entry'(A,B,C), 
          constr((and(D=C,and(E=store(B,F,0),and(G=store(E,F,H),and(or(not(I),J=H,not(K)),and(or(not(I),L=J,not(K)),and(or(not(I),M=N,not(K)),and(or(not(I),N=G,not(K)),and(or(not(I),not(O),not(K)),and(or(not(I),P=(L=0)),and(or(not(I),not(P=Q)),and(or(not(I),and(K,I)),and(or(not(I),Q),and(or(not(R),and(R,I)),and(or(not(I),not(S)),and(R=true,not((H=<0)=O)))))))))))))))))).
'main@orig.main.exit.split' :- 'main@.lr.ph'(A,B,C), 
          constr((and(D=A,and(E= - 1+F,and(F=select(B,C),and(G=store(B,C,E),and(or(not(H),not(I),J=K),and(or(not(H),not(I),K=E),and(or(not(H),not(I),not(L)),and(or(not(M),N=J,not(H)),and(or(not(M),O=N,not(H)),and(or(not(M),P=Q,not(H)),and(or(not(M),Q=G,not(H)),and(or(not(M),R=(O=0)),and(or(not(M),not(R=S)),and(or(not(M),and(H,M)),and(or(not(M),S),and(or(not(T),and(T,M)),and(or(not(H),and(H,I)),and(or(not(M),not(U)),and(T=true,not((F=<1)=L)))))))))))))))))))))).
ff :- 'main@orig.main.exit.split', constr((true)).

