; Automatically generated by map2smt

(set-logic HORN)

(declare-fun new6 ( Int Int ) Bool)
(declare-fun new2 ( Int ) Bool)
(declare-fun new5 ( Int ) Bool)
(declare-fun new4 ( Int ) Bool)
(declare-fun new3 ( Int ) Bool)
(declare-fun new1 ( Int ) Bool)
(declare-fun incorrect ( ) Bool)

(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= B 0) (= C 0) (= D 0))
      (new6 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and (= C 0) (>= B 1) (new2 A))
      (new6 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and (= C 0) (<= B (- 1)) (new2 A))
      (new6 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= A 0) (= B 1) (= C 0) (= D 0) (new6 A B))
      (new5 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and (= B 0) (= C 0) (>= A 1) (new6 A B))
      (new5 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and (= B 0) (= C 0) (<= A (- 1)) (new6 A B))
      (new5 A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (and (= B 1) (new5 B))
      (new4 A)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (new4 A)
      (new3 A)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (new3 A)
      (new2 A)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (new2 A)
      (new1 A)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (and (= A 0) (new1 A))
      incorrect
    )
  )
)

(assert (not incorrect))
(check-sat)
