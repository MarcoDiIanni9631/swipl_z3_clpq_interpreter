% Automatically generated by smt2map




:- pred 'main@entry'.
:- pred 'main@verifier.error.split'.
:- pred 'main@bb30.i'(int,array(int),int,int).
:- mode 'main@bb30.i'(in,in,in,in).
:- pred 'main@bb19.i'(int,int,array(int),int).
:- mode 'main@bb19.i'(in,in,in,in).
:- pred ff.
:- query ff/0.
:- pred constr(bool).
:- mode constr(in).
:- ignore constr/1.

'main@entry' :- constr((true)).
'main@bb19.i'(A,B,C,D) :- 'main@entry', 
          constr((and(not((D=< - 1)=E),and(F=(D=<G),and(H=and(F,E),and(not(A=<0),and(or(not(I),not(J),K=0),and(or(not(I),not(J),B=K),and(or(not(I),not(J),L=M),and(or(not(I),not(J),C=L),and(or(not(J),and(I,J)),and(N=true,and(H=true,and(J=true,not((G=<0)=N))))))))))))))).
'main@bb19.i'(A,B,C,D) :- 'main@bb19.i'(A,E,F,D), 
          constr((and(or(not(G),not(H=<0),A=<0),and(or(not(G),I,not(J)),and(or(not(G),not(K),L=M),and(or(not(G),not(K),B=L),and(or(not(G),not(K),N=O),and(or(not(G),not(K),C=N),and(or(not(K),and(G,K)),and(or(not(G),H=A+E),and(or(not(G),M=1+E),and(or(not(G),O=store(F,H,0)),and(or(not(G),not(A=<0)),and(or(not(G),and(G,J)),and(K=true,not((D=<E)=I)))))))))))))))).
'main@bb30.i'(A,B,C,D) :- 'main@bb19.i'(A,E,B,D), 
          constr((and(or(not(F),not(G),H=0),and(or(not(F),not(G),C=H),and(or(not(F),not(G),not(I)),and(or(not(G),and(F,G)),and(G=true,not((D=<E)=I)))))))).
'main@bb30.i'(A,B,C,D) :- 'main@bb30.i'(A,B,E,D), 
          constr((and(F=or(not(G),not((H=< - 1)=I)),and(or(not(J=<0),A=<0,not(G)),and(or(not(K),I,not(G)),and(or(not(K),not(L),M=N),and(or(not(K),not(L),C=M),and(or(not(G),H=select(B,J)),and(or(not(G),J=A+E),and(F,and(or(not(G),not(A=<0)),and(or(not(G),and(G,O)),and(or(not(L),and(K,L)),and(or(not(K),N=1+E),and(or(not(K),and(K,G)),and(P=true,and(L=true,not((D=<E)=P)))))))))))))))))).
'main@verifier.error.split' :- 'main@bb30.i'(A,B,C,D), 
          constr((and(E=or(not(F),not((G=< - 1)=H)),and(or(A=<0,not(F),not(I=<0)),and(or(not(J),not(H),not(F)),and(or(not(F),I=A+C),and(or(not(F),G=select(B,I)),and(E,and(or(not(F),not(A=<0)),and(or(not(F),and(K,F)),and(or(not(J),and(J,F)),and(or(not(L),and(L,J)),and(or(not(M),and(M,L)),and(M=true,and(N=true,not((D=<C)=N)))))))))))))))).
ff :- 'main@verifier.error.split', constr((true)).

