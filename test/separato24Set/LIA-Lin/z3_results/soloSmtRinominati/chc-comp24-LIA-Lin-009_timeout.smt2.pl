% Automatically generated by smt2map




:- pred 'main@entry'(int).
:- mode 'main@entry'(in).
:- pred 'main@id.exit.split'.
:- pred 'main@tailrecurse.i'(int,int).
:- mode 'main@tailrecurse.i'(in,in).
:- pred ff.
:- query ff/0.
:- pred constr(bool).
:- mode constr(in).
:- ignore constr/1.

'main@entry'(A) :- constr((true)).
'main@tailrecurse.i'(A,B) :- 'main@entry'(C), 
          constr((and(D=C,and(or(not(E),not(F),not(G)),and(or(not(E),not(H),I=J),and(or(not(E),not(H),K=0),and(or(not(E),not(H),A=I),and(or(not(E),not(H),B=K),and(or(not(H),and(E,H)),and(or(not(E),and(E,G)),and(H=true,F=(J=0)))))))))))).
'main@tailrecurse.i'(A,B) :- 'main@tailrecurse.i'(C,D), 
          constr((and(E= - 1+C,and(F=1+D,and(or(not(G),not(H),I=E),and(or(not(G),not(H),J=F),and(or(not(G),not(H),A=I),and(or(not(G),not(H),B=J),and(or(not(G),not(H),not(K)),and(or(not(H),and(G,H)),and(H=true,K=(E=0)))))))))))).
'main@id.exit.split' :- 'main@entry'(A), 
          constr((and(B=A,and(or(not(C),not(D),E=F),and(or(not(C),not(D),G),and(or(not(C),not(F),not(D)),and(or(not(C),and(C,D)),and(or(not(C),E),and(or(not(H),and(H,C)),and(H=true,G=(I=0))))))))))).
'main@id.exit.split' :- 'main@tailrecurse.i'(A,B), 
          constr((and(C= - 1+A,and(D=1+B,and(or(not(E),not(F),G=D),and(or(not(E),not(F),H=G),and(or(not(E),not(F),I),and(or(not(J),not(E),K=L),and(or(not(J),not(E),L=M),and(or(not(E),M=(H=100)),and(or(not(E),and(E,F)),and(or(not(J),and(J,E)),and(or(not(J),K),and(or(not(N),and(N,J)),and(N=true,I=(C=0)))))))))))))))).
ff :- 'main@id.exit.split', constr((true)).

