; Automatically generated by map2smt

(set-logic HORN)

(declare-fun incorrect ( ) Bool)
(declare-fun new1 ( Int (Array Int Int) Int Int Int ) Bool)
(declare-fun new2 ( Int (Array Int Int) Int Int Int ) Bool)
(declare-fun new3 ( Int (Array Int Int) Int Int Int ) Bool)

(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I (Array Int Int)) )
    (=>
      (and (= F 44) (= G (+ 1 E)) (= H 1) (>= (- A E) 1) (= (store B E F ) I) (new3 A I C D G))
      (new3 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and (= F 0) (= G 44) (<= C 43) (>= D 0) (>= (- E A) 0) (>= (- A D) 1) (= (select B D) C))
      (new3 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and (= F 0) (= G 44) (>= D 0) (>= C 45) (>= (- E A) 0) (>= (- A D) 1) (= (select B D) C))
      (new3 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I (Array Int Int)) )
    (=>
      (and (= F 43) (= G (+ 1 E)) (= H 1) (>= (- A E) 1) (= (store B E F ) I) (new2 A I C D G))
      (new2 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= F 0) (>= (- E A) 0) (new3 A B C D F))
      (new2 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I (Array Int Int)) )
    (=>
      (and (= F 42) (= G (+ 1 E)) (= H 1) (>= (- A E) 1) (= (store B E F ) I) (new1 A I C D G))
      (new1 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= F 0) (>= (- E A) 0) (new2 A B C D F))
      (new1 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D (Array Int Int)) (E Int) (F Int) )
    (=>
      (and (= A 1) (= B 0) (>= C 1) (new1 C D E F B))
      incorrect
    )
  )
)

(assert (not incorrect))
(check-sat)
