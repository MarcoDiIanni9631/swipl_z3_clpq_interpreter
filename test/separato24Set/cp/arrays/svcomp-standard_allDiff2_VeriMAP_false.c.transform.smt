; Automatically generated by map2smt

(set-logic HORN)

(declare-fun incorrect ( ) Bool)
(declare-fun new1 ( Int (Array Int Int) Int Int Int Int Int Int Int ) Bool)
(declare-fun new2 ( Int (Array Int Int) Int Int Int Int Int Int Int ) Bool)

(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) )
    (=>
      (and (= J 0) (= K 0) (= L 1) (= M (+ (- 1) I)) (= N 1) (>= C 1) (>= I 0) (= (select B H) O) (= (select B I) O) (new2 A B L D E F G H M))
      (new2 A B C D E F G H I)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) )
    (=>
      (and (= J 0) (= K 0) (= L (+ (- 1) I)) (= M 1) (>= C 1) (>= I 0) (>= (- N O) 1) (= (select B H) N) (= (select B I) O) (new2 A B C D E F G H L))
      (new2 A B C D E F G H I)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) )
    (=>
      (and (= J 0) (= K 0) (= L (+ (- 1) I)) (= M 1) (<= (- N O) (- 1)) (>= C 1) (>= I 0) (= (select B H) N) (= (select B I) O) (new2 A B C D E F G H L))
      (new2 A B C D E F G H I)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) )
    (=>
      (and (= J 0) (= K 0) (= L 1) (= M (+ (- 1) I)) (= N 1) (<= C (- 1)) (>= I 0) (= (select B H) O) (= (select B I) O) (new2 A B L D E F G H M))
      (new2 A B C D E F G H I)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) )
    (=>
      (and (= J 0) (= K 0) (= L (+ (- 1) I)) (= M 1) (<= C (- 1)) (>= I 0) (>= (- N O) 1) (= (select B H) N) (= (select B I) O) (new2 A B C D E F G H L))
      (new2 A B C D E F G H I)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) )
    (=>
      (and (= J 0) (= K 0) (= L (+ (- 1) I)) (= M 1) (<= C (- 1)) (<= (- N O) (- 1)) (>= I 0) (= (select B H) N) (= (select B I) O) (new2 A B C D E F G H L))
      (new2 A B C D E F G H I)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) )
    (=>
      (and (= C 0) (= J 0) (= K 0) (= L 0) (= M (+ 1 H)) (= N 1) (>= I 0) (new1 A B C D E F G M I))
      (new2 A B C D E F G H I)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) )
    (=>
      (and (= J 0) (= K (+ 1 H)) (= L 1) (<= I (- 1)) (new1 A B C D E F G K I))
      (new2 A B C D E F G H I)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) )
    (=>
      (and (= J 0) (= K (+ (- 1) H)) (= L 1) (>= C 1) (>= (- A H) 1) (new2 A B C D E F G H K))
      (new1 A B C D E F G H I)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) )
    (=>
      (and (= J 0) (= K (+ (- 1) H)) (= L 1) (<= C (- 1)) (>= (- A H) 1) (new2 A B C D E F G H K))
      (new1 A B C D E F G H I)
    )
  )
)
(assert
  (forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) )
    (=>
      (and (= C 1) (= I 1) (= J 1) (= K 0) (= L (+ 1 F)) (= M 1) (<= (- F E) (- 1)) (>= F 0) (>= (- G A) 0) (>= (- A E) 1) (= (select B F) D) (= (select B E) D))
      (new1 A B C D D E F G H)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E (Array Int Int)) (F Int) (G Int) (H Int) (I Int) (J Int) )
    (=>
      (and (= A 1) (= B 1) (= C 1) (>= D 1) (new1 D E B F G H I C J))
      incorrect
    )
  )
)

(assert (not incorrect))
(check-sat)
