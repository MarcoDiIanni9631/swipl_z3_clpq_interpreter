; Automatically generated by map2smt

(set-logic HORN)

(declare-fun new11 ( Int Int Int Int ) Bool)
(declare-fun new2 ( Int Int Int ) Bool)
(declare-fun new10 ( Int Int Int ) Bool)
(declare-fun new9 ( Int Int Int ) Bool)
(declare-fun new8 ( Int Int Int ) Bool)
(declare-fun new7 ( Int Int Int ) Bool)
(declare-fun new6 ( Int Int Int ) Bool)
(declare-fun new5 ( Int Int Int ) Bool)
(declare-fun new4 ( Int Int Int ) Bool)
(declare-fun new3 ( Int Int Int ) Bool)
(declare-fun new1 ( ) Bool)
(declare-fun incorrect ( ) Bool)

(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= A 0) (= E 0) (= F 0))
      (new11 A B C D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= E 0) (= F 5) (>= A 1) (new2 B F D))
      (new11 A B C D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= E 0) (= F 5) (<= A (- 1)) (new2 B F D))
      (new11 A B C D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= D 1) (= E 3) (>= A 4) (new11 D A B C))
      (new10 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= D 1) (= E 3) (<= A 2) (new11 D A B C))
      (new10 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= A 3) (= D 0) (= E 3) (= F 3) (new11 D A B C))
      (new10 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= B 4) (= D 4) (= E 4) (new10 A B C))
      (new9 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= D 4) (>= B 5) (new2 A B C))
      (new9 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= D 4) (<= B 3) (new2 A B C))
      (new9 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and (= A 1) (= D 1) (= E 1) (= F 2) (= G 4) (new2 F G C))
      (new8 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= D 1) (= E 4) (>= A 2) (new2 A E C))
      (new8 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= D 1) (= E 4) (<= A 0) (new2 A E C))
      (new8 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= B 3) (= D 3) (= E 3) (new8 A B C))
      (new7 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= D 3) (>= B 4) (new9 A B C))
      (new7 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= D 3) (<= B 2) (new9 A B C))
      (new7 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and (= A 0) (= D 0) (= E 0) (= F 1) (= G 3) (new2 F G C))
      (new6 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= D 0) (= E 3) (>= A 1) (new2 A E C))
      (new6 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= D 0) (= E 3) (<= A (- 1)) (new2 A E C))
      (new6 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= B 2) (= D 2) (= E 2) (new6 A B C))
      (new5 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= D 2) (>= B 3) (new7 A B C))
      (new5 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= D 2) (<= B 1) (new7 A B C))
      (new5 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= D 0) (>= C 1) (new5 A B C))
      (new4 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= D 0) (<= C (- 1)) (new5 A B C))
      (new4 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (new4 A B D)
      (new3 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (new3 A B C)
      (new2 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and (= A 0) (= B 2) (new2 A B C))
      new1
    )
  )
)
(assert 
 (=>
      new1
      incorrect
    ))

(assert (not incorrect))
(check-sat)
