; Automatically generated by map2smt

(set-logic HORN)

(declare-fun new11 ( Int Int Int Int ) Bool)
(declare-fun new10 ( Int Int Int ) Bool)
(declare-fun new9 ( Int Int Int ) Bool)
(declare-fun new5 ( Int Int Int ) Bool)
(declare-fun new8 ( Int Int Int ) Bool)
(declare-fun new7 ( Int Int Int ) Bool)
(declare-fun new6 ( Int Int Int ) Bool)
(declare-fun new4 ( Int Int Int ) Bool)
(declare-fun new3 ( Int Int Int ) Bool)
(declare-fun new2 ( Int Int Int ) Bool)
(declare-fun new1 ( Int ) Bool)
(declare-fun incorrect ( ) Bool)

(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= B 0) (= E 0) (= F 0))
      (new11 A B C D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= D 1) (= E 200) (<= B 199) (new11 A D B C))
      (new10 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= D 0) (= E 200) (>= B 200) (new11 A D B C))
      (new10 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (new5 A B C)
      (new9 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= D 100) (>= C 100) (new9 A B C))
      (new8 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= D 100) (<= C 99) (new10 A B C))
      (new8 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) )
    (=>
      (and (= D 0) (= E (+ 1 B)) (= F 1) (= G (+ 1 C)) (= H 1) (>= A 1) (new6 A E G))
      (new7 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) )
    (=>
      (and (= D 0) (= E (+ 1 B)) (= F 1) (= G (+ 1 C)) (= H 1) (<= A (- 1)) (new6 A E G))
      (new7 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= A 0) (= D 0) (= E 0) (new8 A B C))
      (new7 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (new7 A B C)
      (new6 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (new5 A B C)
      (new5 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= D 100) (>= B 100) (new5 A B C))
      (new4 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= D 100) (= E 0) (<= B 99) (new6 A B E))
      (new4 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= D 0) (= E (+ 1 B)) (= F 1) (>= A 1) (new2 A E C))
      (new3 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= D 0) (= E (+ 1 B)) (= F 1) (<= A (- 1)) (new2 A E C))
      (new3 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= A 0) (= D 0) (= E 0) (new4 A B C))
      (new3 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (new3 A B C)
      (new2 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and (= B 0) (new2 A B C))
      (new1 A)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (and (= A 0) (new1 A))
      incorrect
    )
  )
)

(assert (not incorrect))
(check-sat)
