(set-logic HORN)

(declare-fun |main@precall4.split| ( ) Bool)
(declare-fun |main@.preheader| ( Int Int (Array Int Int) Int Int (Array Int Int) Int Int ) Bool)
(declare-fun |main@_bb| ( (Array Int Int) Int Int Int (Array Int Int) Int ) Bool)
(declare-fun |main@entry| ( Int ) Bool)
(declare-fun |main@.lr.ph| ( Int (Array Int Int) Int Int (Array Int Int) Int Int Int Int ) Bool)

(assert
(forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E (Array Int Int)) (F Int) (G Bool) (H Bool) (I Bool) (J Bool) (K Bool) (L Bool) (M Bool) (N Bool) (O Bool) (P Int) (Q Int) (R Int) (S Bool) (T Int) (U Int) (V Bool) (W Int) (X Int) (Y Bool) (Z Int) (A1 Bool) (B1 Int) (C1 Bool) (D1 Int) (E1 Int) (F1 Int) (G1 Int) (H1 Int) (I1 Int) (J1 Bool) (K1 Bool) (L1 Bool) (M1 Bool) (N1 Bool) (O1 Bool) (P1 Bool) (Q1 Bool) )
(=>
(and
(let ((a!1 (or (not H) (not (= (<= 32 P) I))))
(a!2 (or (not M1) (not (= (<= 2 I1) J1))))
(a!3 (or (not M1) (= H1 (+ F1 (* (- 1) G1)))))
(a!4 (or (not A1) (not (= (<= Z 0) Y)))))
(and (= F (+ D1 Q))
(not (<= D1 0))
(or (not J) (not I) (not H))
(or (not M1) (not (<= E1 0)) (<= D1 0))
(or (not P1) (not M1) (= N1 L1))
(or (not P1) (not M1) (= O1 N1))
(or (not P1) (not M1) (not K1))
(or (not S) (and N M) (and K J))
(or (not L) (not K) (not J))
(or (not M) I (not H))
(or (not O) (not N) (not M))
(or (= B1 Z) (not A1) (not M1))
(or (= F1 B1) (not A1) (not M1))
(or (not A1) (not S) (= T Q))
(or (not A1) (not S) (= R P))
(or (not A1) (not S) (= U R))
(or (not A1) (not S) (= X T))
(or (not Y) (not A1) (not M1))
(or (not (<= F 0)) (<= D1 0))
a!1
(or (not H) (and G H))
(or (not J) (= L (= P 32)))
(or (not J) (and J H))
(or (not K) J)
a!2
(or (not M1) (not (= J1 L1)))
(or (not M1) (= C1 (= F1 G1)))
(or (not M1) (= E1 (+ D1 G1)))
a!3
(or (not M1) (= I1 (+ 1 H1)))
(or (not M1) (and A1 M1))
(or (not P1) (and P1 M1))
(or (not P1) O1)
(or (not Q1) (and Q1 P1))
(or (not M) (= O (= P 9)))
(or (not M) (and M H))
(or (not N) M)
a!4
(or (not A1) (= V (= U 34)))
(or (not A1) (= G1 (+ W X)))
(or (not A1) (= W (ite V 1 0)))
(or (not A1) (and A1 S))
(or C1 (not M1))
(= Q1 true)
(= P (select E F))))
)
main@precall4.split
)
)
)
(assert
(forall ( (A Int) (B (Array Int Int)) (C Int) (D Int) (E Int) (F (Array Int Int)) (G Int) (H Bool) (I Bool) (J Bool) (K Bool) (L Bool) (M Int) (N Int) (O Bool) (P Int) (Q Int) (R Bool) (S Int) (T Int) (U Bool) (V Bool) (W Bool) (X Bool) (Y Bool) (Z Bool) (A1 Int) (B1 Bool) (C1 Int) (D1 Bool) (E1 Int) (F1 Int) (G1 Int) (H1 Bool) (I1 Int) (J1 Bool) (K1 Int) (L1 Bool) (M1 Int) (N1 Int) (O1 Int) (P1 Int) (Q1 Int) (R1 Int) (S1 Bool) (T1 Bool) (U1 Bool) (V1 Bool) (W1 Bool) (X1 Bool) (Y1 Bool) (Z1 Bool) )
(=>
(and
(let ((a!1 (or (not I) (not (= (<= 32 M) J))))
(a!2 (or (not V1) (not (= (<= 2 R1) S1))))
(a!3 (or (not V1) (= Q1 (+ O1 (* (- 1) P1)))))
(a!4 (or (not D1) (not (= (<= A1 1) B1)))))
(and (= G (+ M1 A1))
(not (<= M1 0))
(or (not O) (and X L) (and U K))
(or (not V1) (not (<= N1 0)) (<= M1 0))
(or (not V1) (and J1 V1) (and H1 V1))
(or (not Y1) (not V1) (= W1 U1))
(or (not Y1) (not V1) (= X1 W1))
(or (not Y1) (not V1) (not T1))
(or (not U) (not J) (not I))
(or (not W) (not U) (not K))
(or (not V) W (not U))
(or (not X) (not Z) (not L))
(or (not X) Z (not Y))
(or (not X) J (not I))
(or (not D1) (and X Y) (and V U))
(or (= I1 F1) (not H1) (not V1))
(or (not H1) (= O1 I1) (not V1))
(or (not H1) (not D1) (= E1 C1))
(or (not H1) (not D1) (= F1 E1))
(or (not H1) (not D1) (not B1))
(or (not J1) (not O) (= Q N))
(or (not J1) (not O) (= N M))
(or (not J1) (not O) (= P A1))
(or (not J1) (not O) (= T P))
(or (= K1 G1) (not J1) (not V1))
(or (= O1 K1) (not J1) (not V1))
(or (not (<= G 0)) (<= M1 0))
a!1
(or (not I) (and H I))
a!2
(or (not V1) (not (= S1 U1)))
(or (not V1) (= L1 (= O1 P1)))
(or (not V1) (= N1 (+ M1 P1)))
a!3
(or (not V1) (= R1 (+ 1 Q1)))
(or (not Y1) (and Y1 V1))
(or (not Y1) X1)
(or (not Z1) (and Z1 Y1))
(or (not U) (= W (= M 32)))
(or (not U) (and U I))
(or U (not K))
(or (not V) U)
(or (not X) (= Z (= M 9)))
(or (not X) (and X I))
(or X (not L))
(or X (not Y))
a!4
(or (not D1) (= C1 (+ (- 1) A1)))
(or (not H1) (and H1 D1))
(or (not J1) (= R (= Q 34)))
(or (not J1) (= S (ite R (- 1) 0)))
(or (not J1) (= G1 (+ S T)))
(or (not J1) (and J1 O))
(or L1 (not V1))
(= Z1 true)
(= M (select F G))))
)
main@precall4.split
)
)
)
(assert
(forall ( (CHC_COMP_UNUSED Bool) )
(=>
(and
main@precall4.split
true
)
false
)
)
)

(check-sat)
(exit)