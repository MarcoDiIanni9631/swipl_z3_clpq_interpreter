; Automatically generated by map2smt

(set-logic HORN)

(declare-fun new9 ( Int Int Int Int Int Int ) Bool)
(declare-fun new6 ( Int Int Int Int Int ) Bool)
(declare-fun new8 ( Int Int Int Int Int ) Bool)
(declare-fun new7 ( Int Int Int Int Int ) Bool)
(declare-fun new4 ( Int Int Int Int Int ) Bool)
(declare-fun new5 ( Int Int Int Int Int ) Bool)
(declare-fun new2 ( Int Int Int Int Int ) Bool)
(declare-fun new3 ( Int Int Int Int Int ) Bool)
(declare-fun new1 ( Int ) Bool)
(declare-fun incorrect ( ) Bool)

; Aggiungiamo due predicati booleani fittizi per testare l’implicazione
(declare-fun cond1 (Int Int) Bool)
(declare-fun cond2 (Int Int) Bool)

(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) )
    (=>
      (and (= B 0) (= G 0) (= H 0))
      (new9 A B C D E F)
    )
  )
)

; Clausola modificata — prima era (=> (- E C) 1)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (=> (cond1 E C) (cond2 E C)) (new6 A B C C E))
      (new5 A B C D E)
    )
  )
)

; Le altre clausole le lasciamo invariate
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) )
    (=>
      (and (= G 0) (= H (+ 1 E)) (= I 1) (>= B 1) (new6 A C D H F))
      (new9 A B C D E F)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) )
    (=>
      (and (= G 0) (= H (+ 1 E)) (= I 1) (<= B (- 1)) (new6 A C D H F))
      (new9 A B C D E F)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= F 1) (>= (- D B) 0) (new9 A F B C D E))
      (new8 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= F 0) (<= (- D B) (- 1)) (new9 A F B C D E))
      (new8 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (<= (- D E) (- 1)) (new8 A B C D E))
      (new7 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and (= F (+ 1 C)) (= G 1) (>= (- D E) 0) (new4 A B F D E))
      (new7 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (new7 A B C D E)
      (new6 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (new5 A B C D E)
      (new4 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (>= (- E B) 1) (new4 A B B D E))
      (new3 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (new3 A B C D E)
      (new2 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= B 0) (new2 A B C D E))
      (new1 A)
    )
  )
)
(assert
  (forall ( (A Int) )
    (=>
      (and (= A 0) (new1 A))
      incorrect
    )
  )
)

(assert (not incorrect))
(check-sat)
