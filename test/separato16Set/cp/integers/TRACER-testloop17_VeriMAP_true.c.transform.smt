; Automatically generated by map2smt

(set-logic HORN)

(declare-fun new9 ( Int Int Int Int Int ) Bool)
(declare-fun new8 ( Int Int Int Int ) Bool)
(declare-fun new7 ( Int Int Int Int ) Bool)
(declare-fun new5 ( Int Int Int Int ) Bool)
(declare-fun new6 ( Int Int Int Int ) Bool)
(declare-fun new4 ( Int Int Int Int Int ) Bool)
(declare-fun new3 ( Int Int Int Int Int ) Bool)
(declare-fun new2 ( Int Int Int Int ) Bool)
(declare-fun new1 ( ) Bool)
(declare-fun incorrect ( ) Bool)

(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and (= A 0) (= F 0) (= G 0))
      (new9 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= E 1) (= F 0) (<= D 0) (new9 E A B C D))
      (new8 A B C D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= E 0) (= F 0) (>= D 1) (new9 E A B C D))
      (new8 A B C D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) )
    (=>
      (and (= E 1) (= F 1) (= G (+ 1 C)) (= H 1) (= I (+ 1 B)) (= J 1) (<= B 0) (new5 A I G F))
      (new7 A B C D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) )
    (=>
      (and (= E 1) (= F 0) (= G (+ 1 C)) (= H 1) (= I (+ 1 B)) (= J 1) (>= B 1) (new5 A I G F))
      (new7 A B C D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (<= (- B A) (- 1)) (new7 A B C D))
      (new6 A B C D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (>= (- B A) 0) (new8 A B C D))
      (new6 A B C D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (new6 A B C D)
      (new5 A B C D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (new4 A B C D E)
      (new4 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and (= A 0) (= F 0) (= G 0) (new4 A B C D E))
      (new3 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= F 0) (>= A 1) (new5 B C D E))
      (new3 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= F 0) (<= A (- 1)) (new5 B C D E))
      (new3 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= E 1) (= F 1) (>= A 2) (new3 E A B C D))
      (new2 A B C D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= E 0) (= F 1) (<= A 1) (new3 E A B C D))
      (new2 A B C D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= A 0) (= B 0) (= C 0) (new2 D A B C))
      new1
    )
  )
)
(assert 
 (=>
      new1
      incorrect
    ))

(assert (not incorrect))
(check-sat)
