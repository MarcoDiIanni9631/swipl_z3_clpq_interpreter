; Automatically generated by map2smt

(set-logic HORN)

(declare-fun new8 ( Int Int Int Int ) Bool)
(declare-fun new7 ( Int Int Int ) Bool)
(declare-fun new6 ( Int Int Int ) Bool)
(declare-fun new5 ( Int Int Int ) Bool)
(declare-fun new4 ( Int Int Int ) Bool)
(declare-fun new2 ( Int Int Int ) Bool)
(declare-fun new3 ( Int Int Int ) Bool)
(declare-fun new1 ( ) Bool)
(declare-fun incorrect ( ) Bool)

(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= A 0) (= E 0) (= F 0))
      (new8 A B C D)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= D 1) (= E 0) (>= B 1) (new8 D A B C))
      (new7 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= D 1) (= E 0) (<= B (- 1)) (new8 D A B C))
      (new7 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) )
    (=>
      (and (= B 0) (= D 0) (= E 0) (= F 0) (new8 D A B C))
      (new7 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) )
    (=>
      (and (= D 0) (= E (+ (- 1) A)) (= F 1) (= G (+ (- 1) B)) (= H 1) (>= A 1) (new5 E G C))
      (new6 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= D 0) (<= A 0) (new7 A B C))
      (new6 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (new6 A B C)
      (new5 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) )
    (=>
      (and (= D 0) (= E (+ 1 A)) (= F 1) (= G (+ 1 B)) (= H 1) (>= C 1) (new2 E G C))
      (new4 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) )
    (=>
      (and (= D 0) (= E (+ 1 A)) (= F 1) (= G (+ 1 B)) (= H 1) (<= C (- 1)) (new2 E G C))
      (new4 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= C 0) (= D 0) (= E 0) (new5 A B C))
      (new4 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (new4 A B D)
      (new3 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (new3 A B C)
      (new2 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) )
    (=>
      (and (= A 0) (= B 0) (new2 A B C))
      new1
    )
  )
)
(assert 
 (=>
      new1
      incorrect
    ))

(assert (not incorrect))
(check-sat)
