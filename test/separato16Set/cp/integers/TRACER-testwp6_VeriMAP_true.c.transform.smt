; Automatically generated by map2smt

(set-logic HORN)

(declare-fun new5 ( Int Int Int ) Bool)
(declare-fun new4 ( Int Int ) Bool)
(declare-fun new3 ( Int Int ) Bool)
(declare-fun new2 ( Int Int ) Bool)
(declare-fun new1 ( ) Bool)
(declare-fun incorrect ( ) Bool)

(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= A 0) (= D 0) (= E 0))
      (new5 A B C)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= C 1) (= D 50) (<= A 50) (new5 C A B))
      (new4 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= C 0) (= D 50) (>= A 51) (new5 C A B))
      (new4 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= C 0) (= D (+ 3 A)) (= E 3) (>= A 1) (new4 D B))
      (new3 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (= C 0) (= D (+ 5 A)) (= E 5) (<= A 0) (new4 D B))
      (new3 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= C 0) (= D 1) (>= B 1) (new3 D B))
      (new2 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) )
    (=>
      (and (= C 0) (= D 47) (<= B 0) (new3 D B))
      (new2 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) )
    (=>
      (new2 A B)
      new1
    )
  )
)
(assert 
 (=>
      new1
      incorrect
    ))

(assert (not incorrect))
(check-sat)
