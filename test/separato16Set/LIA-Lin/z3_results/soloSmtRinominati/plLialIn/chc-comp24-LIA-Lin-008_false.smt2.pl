% Automatically generated by smt2map




:- pred 'main@entry'.
:- pred 'main@tailrecurse.i3'(bool,int,int).
:- mode 'main@tailrecurse.i3'(in,in,in).
:- pred 'main@a.exit4.split'.
:- pred 'main@tailrecurse.i'(bool,int,int,int,int).
:- mode 'main@tailrecurse.i'(in,in,in,in,in).
:- pred ff.
:- query ff/0.
:- pred constr(bool).
:- mode constr(in).
:- ignore constr/1.

'main@entry' :- constr((true)).
'main@tailrecurse.i'(A,B,C,D,E) :- 'main@entry', 
          constr((and(C=ite(A,1,0),and(or(not(F),not(G),H=B),and(or(not(F),not(G),I=C),and(or(not(F),not(G),D=H),and(or(not(F),not(G),E=I),and(or(not(G),and(F,G)),and(G=true,A=(B=0)))))))))).
'main@tailrecurse.i'(A,B,C,D,E) :- 'main@tailrecurse.i'(A,B,C,F,G), 
          constr((and(or(not(H),not(I),J=G),and(or(not(H),not(I),K=F),and(or(not(H),not(I),D=J),and(or(not(H),not(I),E=K),and(or(not(H),not(I),not(L)),and(or(not(I),and(H,I)),and(I=true,L=(F=0)))))))))).
'main@tailrecurse.i3'(A,B,C) :- 'main@tailrecurse.i'(A,D,E,F,G), 
          constr((and(or(H,not(I),not(J)),and(or(not(I),not(K),L=D),and(or(not(I),not(K),M=E),and(or(not(I),not(K),B=L),and(or(not(I),not(K),C=M),and(or(not(K),and(I,K)),and(or(not(I),and(I,J)),and(K=true,H=(F=0))))))))))).
'main@tailrecurse.i3'(A,B,C) :- 'main@tailrecurse.i3'(A,D,E), 
          constr((and(or(not(F),not(G),H=E),and(or(not(F),not(G),I=D),and(or(not(F),not(G),B=H),and(or(not(F),not(G),C=I),and(or(not(F),not(G),not(J)),and(or(not(G),and(F,G)),and(G=true,J=(D=0)))))))))).
'main@a.exit4.split' :- 'main@tailrecurse.i3'(A,B,C), 
          constr((and(or(not(D),not(E),F),and(or(not(D),and(D,E)),and(or(not(D),not(A)),and(or(not(G),and(G,D)),and(G=true,F=(B=0)))))))).
ff :- 'main@a.exit4.split', constr((true)).

