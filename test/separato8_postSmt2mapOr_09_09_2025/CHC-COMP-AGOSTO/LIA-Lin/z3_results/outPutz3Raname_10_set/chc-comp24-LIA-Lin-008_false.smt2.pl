% Automatically generated by smt2map




:- pred 'main@entry'.
:- pred 'main@tailrecurse.i3'(bool,int,int).
:- mode 'main@tailrecurse.i3'(in,in,in).
:- pred 'main@a.exit4.split'.
:- pred 'main@tailrecurse.i'(bool,int,int,int,int).
:- mode 'main@tailrecurse.i'(in,in,in,in,in).
:- pred ff.
:- query ff/0.
:- pred constr(bool).
:- mode constr(in).
:- ignore constr/1.

'main@entry' :- constr((true)).
'main@tailrecurse.i'(A,B,C,D,E) :- 'main@entry', 
          constr((A=(B=0)&(F=true&(or(not(F),and(G,F))&(or(not(G),or(not(F),E=H))&(or(not(G),or(not(F),D=I))&(or(not(G),or(not(F),H=C))&(or(not(G),or(not(F),I=B))&C=ite(A,1,0))))))))).
'main@tailrecurse.i'(A,B,C,D,E) :- 'main@tailrecurse.i'(A,B,C,F,G), 
          constr((H=(F=0)&(I=true&(or(not(I),and(J,I))&(or(not(J),or(not(I),not(H)))&(or(not(J),or(not(I),E=K))&(or(not(J),or(not(I),D=L))&(or(not(J),or(not(I),K=F))&or(not(J),or(not(I),L=G)))))))))).
'main@tailrecurse.i3'(A,B,C) :- 'main@tailrecurse.i'(A,D,E,F,G), 
          constr((H=(F=0)&(I=true&(or(not(J),and(J,K))&(or(not(I),and(J,I))&(or(not(J),or(not(I),C=L))&(or(not(J),or(not(I),B=M))&(or(not(J),or(not(I),L=E))&(or(not(J),or(not(I),M=D))&or(H,or(not(J),not(K)))))))))))).
'main@tailrecurse.i3'(A,B,C) :- 'main@tailrecurse.i3'(A,D,E), 
          constr((F=(D=0)&(G=true&(or(not(G),and(H,G))&(or(not(H),or(not(G),not(F)))&(or(not(H),or(not(G),C=I))&(or(not(H),or(not(G),B=J))&(or(not(H),or(not(G),I=D))&or(not(H),or(not(G),J=E)))))))))).
'main@a.exit4.split' :- 'main@tailrecurse.i3'(A,B,C), 
          constr((D=(B=0)&(E=true&(or(not(E),and(E,F))&(or(not(F),not(A))&(or(not(F),and(F,G))&or(not(F),or(not(G),D)))))))).
ff :- 'main@a.exit4.split', constr((true)).

