% Automatically generated by smt2map




:- pred 'main@mult.exit6.split'.
:- pred 'main@entry'.
:- pred 'main@tailrecurse.i'(int,int,int,int).
:- mode 'main@tailrecurse.i'(in,in,in,in).
:- pred 'main@tailrecurse.outer.i3'(int,int,int,int,int).
:- mode 'main@tailrecurse.outer.i3'(in,in,in,in,in).
:- pred 'main@tailrecurse.outer.i'(int,int,int,int).
:- mode 'main@tailrecurse.outer.i'(in,in,in,in).
:- pred 'main@tailrecurse.i5'(int,int,int,int,int).
:- mode 'main@tailrecurse.i5'(in,in,in,in,in).
:- pred ff.
:- query ff/0.
:- pred constr(bool).
:- mode constr(in).
:- ignore constr/1.

'main@entry' :- constr((true)).
'main@tailrecurse.outer.i'(A,B,C,D) :- 'main@entry', 
          constr((E=(F=or(not(A=<46340),not(A>=0)))&(G=(H=or(not(B=<46340),not(B>=0)))&(E&(I=true&(not(H)&(not(F)&(or(not(I),and(J,I))&(or(not(J),not(I),D=K)&(or(not(J),not(I),C=L)&(or(not(J),not(I),K=B)&(or(not(J),not(I),L=0)&G)))))))))))).
'main@tailrecurse.outer.i'(A,B,C,D) :- 'main@tailrecurse.i'(A,B,E,F), 
          constr((G= - 1*F&(H=true&(or(not(I),and(I,J))&(or(not(I),K= - 1+L)&(or(not(I),M=E+A)&(or(not(H),and(I,H))&(or(not(J),and(J,N))&(or(not(J),O=(L=0))&(or(not(I),or(not(H),D=P))&(or(not(I),or(not(H),C=Q))&(or(not(I),or(not(H),P=K))&(or(not(I),or(not(H),Q=M))&(or(not(I),or(not(O),not(J)))&(or(not(J),or(not(N),not(R)))&(or(not(J),or(not(N),L=S))&(or(not(J),or(not(N),S=F))& ~ ((0=<F)=R)))))))))))))))))).
'main@tailrecurse.i'(A,B,C,D) :- 'main@tailrecurse.outer.i'(A,B,C,E), 
          constr((or(not(F),or(not(G),H=E))&(G=true&(or(not(G),and(F,G))&or(not(F),or(not(G),D=H)))))).
'main@tailrecurse.i'(A,B,C,D) :- 'main@tailrecurse.i'(A,B,C,E), 
          constr((F= - 1*E&(G=true&(or(not(G),and(H,G))&(or(not(H),or(not(G),I))&(or(not(H),or(not(G),D=J))&(or(not(H),or(not(G),J=F))& ~ ((0=<E)=I)))))))).
'main@tailrecurse.outer.i3'(A,B,C,D,E) :- 'main@tailrecurse.i'(B,C,F,G), 
          constr((H= - 1*G&(I=true&(or(not(J),and(J,K))&(or(not(I),and(J,I))&(or(not(K),and(L,K))&(or(not(K),M=(N=0))&(or(not(J),or(M,not(K)))&(or(not(J),or(not(I),E=O))&(or(not(J),or(not(I),D=P))&(or(not(J),or(not(I),P=0))&(or(not(J),or(not(I),O=B))&(or(not(J),or(not(K),A=Q))&(or(not(J),or(not(K),Q=F))&(or(not(R),or(not(L),not(K)))&(or(S=G,or(not(L),not(K)))&(or(not(L),or(N=S,not(K)))& ~ ((0=<G)=R)))))))))))))))))).
'main@tailrecurse.outer.i3'(A,B,C,D,E) :- 'main@tailrecurse.i5'(A,B,C,F,G), 
          constr((H= - 1*G&(I=true&(or(not(J),and(J,K))&(or(not(J),L= - 1+M)&(or(not(J),N=F+C)&(or(not(I),and(J,I))&(or(not(K),and(K,O))&(or(not(K),P=(M=0))&(or(not(J),or(not(P),not(K)))&(or(not(J),or(not(I),E=Q))&(or(not(J),or(not(I),D=R))&(or(not(J),or(not(I),R=N))&(or(not(J),or(not(I),Q=L))&(or(not(K),or(not(O),not(S)))&(or(not(K),or(not(O),M=T))&(or(not(K),or(not(O),T=G))& ~ ((0=<G)=S)))))))))))))))))).
'main@tailrecurse.i5'(A,B,C,D,E) :- 'main@tailrecurse.outer.i3'(A,B,C,D,F), 
          constr((or(not(G),or(not(H),I=F))&(H=true&(or(not(H),and(G,H))&or(not(G),or(not(H),E=I)))))).
'main@tailrecurse.i5'(A,B,C,D,E) :- 'main@tailrecurse.i5'(A,B,C,D,F), 
          constr((G= - 1*F&(H=true&(or(not(H),and(I,H))&(or(not(I),or(J,not(H)))&(or(not(I),or(not(H),E=K))&(or(not(I),or(not(H),K=G))& ~ ((0=<F)=J)))))))).
'main@mult.exit6.split' :- 'main@tailrecurse.i5'(A,B,C,D,E), 
          constr((F=or(not(G),not((B=<0)=H))&(I=or(not(G),not((C=<0)=J))&(K=or(not(G),not((A=L)=M))&(N= - 1*E&(O=true&(or(not(P),and(P,Q))&(or(not(P),R=(S=0))&(or(not(O),and(O,G))&(or(not(G),T)&(or(not(G),and(P,G))&(or(not(G),T=and(U,J))&(or(not(G),U=and(M,H))&(F&(I&(K&(or(not(P),not(Q),not(V))&(or(not(P),not(Q),W=E)&(or(not(P),not(Q),S=W)&(or(not(P),R,not(G))&(or(not(P),L=X,not(G))&(or(not(P),X=D,not(G))&not((0=<E)=V))))))))))))))))))))))).
ff :- 'main@mult.exit6.split', constr((true)).

