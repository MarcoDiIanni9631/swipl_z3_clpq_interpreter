% Automatically generated by smt2map




:- pred 'main@bb32.i'(int,array(int),int,array(int),int,int,array(int),int,int,array(int)).
:- mode 'main@bb32.i'(in,in,in,in,in,in,in,in,in,in).
:- pred 'main@verifier.error.split'.
:- pred 'main@entry'(int,int).
:- mode 'main@entry'(in,in).
:- pred 'main@bb46.i'(int,array(int),int,array(int),int,int,array(int),int).
:- mode 'main@bb46.i'(in,in,in,in,in,in,in,in).
:- pred 'main@bb15.i'(int,int,int,array(int),int,array(int),int,int,int,array(int),array(int)).
:- mode 'main@bb15.i'(in,in,in,in,in,in,in,in,in,in,in).
:- pred 'main@bb60.i'(int,array(int),int,array(int),int,int).
:- mode 'main@bb60.i'(in,in,in,in,in,in).
:- pred ff.
:- query ff/0.
:- pred constr(bool).
:- mode constr(in).
:- ignore constr/1.

'main@entry'(A,B) :- constr((true)).
'main@bb15.i'(A,B,C,D,E,F,G,H,I,J,K) :- 'main@entry'(A,L), 
          constr((~ ((I=<0)=M)&(N=true&(M=true&(and(O,N)&(not(N)&(C=P&(not(N)&(not(O)&(P=0&(not(N)&(not(O)&(F=Q&(not(N)&(not(O)&(D=R&(not(N)&(not(O)&(Q=S&(not(N)&(not(O)&(R=T&(not(N)&(not(O)&(~ (H=<0)&(~ (G=<0)&(~ (E=<0)&(~ (B=<0)&U=L)))))))))))))))))))))))))))).
'main@bb15.i'(A,B,C,D,E,F,G,H,I,J,K) :- 'main@bb15.i'(A,B,L,M,E,N,G,H,I,J,K), 
          constr((~ ((I=<L)=O)&(P=true&(and(Q,R)&(not(Q)&(not(E=<0)&(not(Q)&(not(B=<0)&(not(Q)&(S=1+L&(not(Q)&(T=E+L&(not(Q)&(U=B+L&(not(Q)&(V=A&(not(Q)&(W=store(N,T,X)&(not(Q)&(Y=store(M,U,X)&(not(Q)&(and(Q,P)&(not(P)&(C=Z&(not(P)&(not(Q)&(Z=S&(not(P)&(not(Q)&(F=A1&(not(P)&(not(Q)&(D=B1&(not(P)&(not(Q)&(A1=W&(not(P)&(not(Q)&(B1=Y&(not(P)&(not(Q)&(O&(not(Q)&(not(R)&(E=<0&(not(Q)&(not(T=<0)&(B=<0&(not(Q)&not(U=<0)))))))))))))))))))))))))))))))))))))))))))))))))).
'main@bb32.i'(A,B,C,D,E,F,G,H,I,J) :- 'main@bb15.i'(K,A,L,B,C,D,F,H,I,J,M), 
          constr((~ ((I=<L)=N)&(O=true&(and(O,P)&(not(O)&(not(N)&(not(P)&(not(O)&(E=Q&(not(P)&(not(O)&(Q=0&(not(P)&(not(O)&(G=R&(not(P)&(not(O)&(R=M&(not(P)&not(O)))))))))))))))))))).
'main@bb32.i'(A,B,C,D,E,F,G,H,I,J) :- 'main@bb32.i'(A,B,C,D,K,F,L,H,I,J), 
          constr((~ ((I=<K)=M)&(N=true&(and(N,O)&(not(N)&(and(O,P)&(not(O)&(not(C=<0)&(not(O)&(not(F=<0)&(not(O)&(Q=C+K&(not(O)&(R=select(D,Q)&(not(O)&(S=1+K&(not(O)&(T=F+K&(not(O)&(U=store(L,T,R)&(not(O)&(E=V&(not(O)&(not(N)&(V=S&(not(O)&(not(N)&(G=W&(not(O)&(not(N)&(W=U&(not(O)&(not(N)&(not(P)&(M&(not(O)&(not(Q=<0)&(C=<0&(not(O)&(not(T=<0)&(F=<0&not(O)))))))))))))))))))))))))))))))))))))))))).
'main@bb46.i'(A,B,C,D,E,F,G,H) :- 'main@bb32.i'(A,B,I,J,K,C,D,F,H,L), 
          constr((~ ((H=<K)=M)&(N=true&(and(O,N)&(not(N)&(not(N)&(not(O)&(not(M)&(E=P&(not(N)&(not(O)&(P=0&(not(N)&(not(O)&(G=Q&(not(N)&(not(O)&(Q=L&(not(N)&not(O)))))))))))))))))))).
'main@bb46.i'(A,B,C,D,E,F,G,H) :- 'main@bb46.i'(A,B,C,D,I,F,J,H), 
          constr((~ ((H=<I)=K)&(L=true&(and(M,N)&(not(M)&(not(C=<0)&(not(M)&(not(F=<0)&(not(M)&(O=F+I&(not(M)&(P=C+I&(not(M)&(Q=1+I&(not(M)&(R=select(D,P)&(not(M)&(S=store(J,O,R)&(not(M)&(and(M,L)&(not(L)&(E=T&(not(L)&(not(M)&(T=Q&(not(L)&(not(M)&(G=U&(not(L)&(not(M)&(U=S&(not(L)&(not(M)&(not(N)&(K&(not(M)&(not(P=<0)&(C=<0&(not(M)&(not(O=<0)&(F=<0&not(M)))))))))))))))))))))))))))))))))))))))))).
'main@bb60.i'(A,B,C,D,E,F) :- 'main@bb46.i'(A,B,G,H,I,C,D,F), 
          constr((~ ((F=<I)=J)&(K=true&(and(L,K)&(not(K)&(not(L)&(not(K)&(not(J)&(E=M&(not(K)&(not(L)&(M=0&(not(K)&not(L)))))))))))))).
'main@bb60.i'(A,B,C,D,E,F) :- 'main@bb60.i'(A,B,C,D,G,F), 
          constr((~ ((F=<G)=H)&(H=true&(I=true&(and(J,K)&(not(J)&(not(A=<0)&(not(J)&(not(C=<0)&(not(J)&(L=A+G&(not(J)&(M=select(B,L)&(not(J)&(N=C+G&(not(J)&(O=select(D,N)&(not(J)&(P=(M=O)&(not(J)&(and(J,Q)&(not(Q)&(R=1+G&(not(Q)&(and(Q,I)&(not(I)&(not(Q)&(P&(not(J)&(not(L=<0)&(A=<0&(not(J)&(not(N=<0)&(C=<0&(not(J)&(E=S&(not(I)&(not(Q)&(S=R&(not(I)&not(Q))))))))))))))))))))))))))))))))))))))))).
'main@verifier.error.split' :- 'main@bb60.i'(A,B,C,D,E,F), 
          constr((~ ((F=<E)=G)&(G=true&(H=true&(and(H,I)&(not(H)&(and(I,J)&(not(I)&(and(J,K)&(not(J)&(and(K,L)&(not(K)&(not(C=<0)&(not(K)&(not(A=<0)&(not(K)&(M=C+E&(not(K)&(N=select(D,M)&(not(K)&(O=select(B,P)&(not(K)&(P=A+E&(not(K)&(Q=(O=N)&(not(K)&(not(K)&(not(Q)&(not(J)&(C=<0&(not(M=<0)&(not(K)&(A=<0&(not(P=<0)&not(K))))))))))))))))))))))))))))))))))).
ff :- 'main@verifier.error.split', constr((true)).

