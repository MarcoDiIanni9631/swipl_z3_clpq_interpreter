% Automatically generated by smt2map




:- pred 'main@entry'.
:- pred 'main@isodd.exit.split'.
:- pred 'main@tailrecurse.i'(int,int).
:- mode 'main@tailrecurse.i'(in,in).
:- pred ff.
:- query ff/0.
:- pred constr(bool).
:- mode constr(in).
:- ignore constr/1.

'main@entry' :- constr((true)).
'main@tailrecurse.i'(A,B) :- 'main@entry', 
          constr((and(or(not(C),not(D),E=A),and(or(not(C),not(D),B=E),and(or(not(D),and(C,D)),and(not(F),and(D=true,not((0=<A)=F)))))))).
'main@tailrecurse.i'(A,B) :- 'main@tailrecurse.i'(A,C), 
          constr((and(or(not(D),E,not(F)),and(or(not(G),not(H),not(D)),and(or(not(I),not(E),not(F)),and(or(not(J),not(K),not(I)),and(or(not(L),and(K,I),and(H,D)),and(or(not(L),not(M),N=O),and(or(not(L),not(M),B=N),and(or(not(L),not(M),not(P)),and(or(not(D),G=(C=0)),and(or(not(D),and(D,F)),and(or(not(H),D),and(or(not(I),J=(C=1)),and(or(not(I),and(I,F)),and(or(not(K),I),and(or(not(M),and(L,M)),and(or(not(L),O= - 2+C),and(or(not(L),P=(C=2)),and(M=true,not((1=<C)=E))))))))))))))))))))).
'main@isodd.exit.split' :- 'main@tailrecurse.i'(A,B), 
          constr((and(or(not(C),and(D,E),and(F,G),and(H,I)),and(or(not(I),and(D,J),and(G,K)),and(or(not(H),not(I),L=0),and(or(not(H),not(I),M=L),and(or(not(H),not(I),N),and(or(not(G),O,not(P)),and(or(not(G),not(Q),not(K)),and(or(not(F),not(G),R=0),and(or(not(F),not(G),M=R),and(or(not(F),not(G),Q),and(or(not(D),not(O),not(P)),and(or(not(D),not(E),S=1),and(or(not(D),not(E),M=S),and(or(not(D),not(T),not(J)),and(or(not(D),T,not(E)),and(or(not(C),U=A mod 2),and(or(not(C),V=(M=U)),and(or(not(C),not(V)),and(or(not(W),and(W,C)),and(or(not(I),X= - 2+B),and(or(not(I),N=(B=2)),and(or(not(H),I),and(or(not(G),Q=(B=0)),and(or(not(G),and(G,P)),and(or(G,not(K)),and(or(not(F),G),and(or(not(D),T=(B=1)),and(or(not(D),and(D,P)),and(or(D,not(J)),and(or(D,not(E)),and(W=true,not((1=<B)=O)))))))))))))))))))))))))))))))))).
ff :- 'main@isodd.exit.split', constr((true)).

