; Automatically generated by map2smt

(set-logic HORN)

(declare-fun new9 ( Int Int Int Int Int Int ) Bool)
(declare-fun new8 ( Int Int Int Int Int ) Bool)
(declare-fun new7 ( Int Int Int Int Int ) Bool)
(declare-fun new6 ( Int Int Int Int Int ) Bool)
(declare-fun new5 ( Int Int Int Int Int ) Bool)
(declare-fun new3 ( Int Int Int Int Int ) Bool)
(declare-fun new4 ( Int Int Int Int Int ) Bool)
(declare-fun new2 ( Int Int Int Int Int ) Bool)
(declare-fun new1 ( ) Bool)
(declare-fun incorrect ( ) Bool)

(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) )
    (=>
      (and (= A 0) (= G 0) (= H 0))
      (new9 A B C D E F)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) )
    (=>
      (and (= D 0) (= F 0) (= G 0) (= H 1) (new7 A B C D H))
      (new8 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and (= F 0) (= G 0) (>= D 1) (new7 A B C D G))
      (new8 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and (= F 0) (= G 0) (<= D (- 1)) (new7 A B C D G))
      (new8 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (new9 E A B C D E)
      (new7 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) )
    (=>
      (and (= D (* 2 B)) (= F (* 2 B)) (= G (* 2 B)) (= H 2) (= I 1) (new7 A B C D I))
      (new6 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and (= F (* 2 B)) (= G 2) (>= (- D (* 2 B)) 1) (new8 A B C D E))
      (new6 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and (= F (* 2 B)) (= G 2) (<= (- D (* 2 B)) (- 1)) (new8 A B C D E))
      (new6 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) )
    (=>
      (and (= A 4) (= F 4) (= G 4) (= H (- 10)) (= I 5) (= J 4) (= K 1) (new3 I B C H E))
      (new5 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) )
    (=>
      (and (= F 4) (= G (+ 1 A)) (= H 1) (>= A 5) (new3 G B C D E))
      (new5 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) )
    (=>
      (and (= F 4) (= G (+ 1 A)) (= H 1) (<= A 3) (new3 G B C D E))
      (new5 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) )
    (=>
      (and (= F (+ 2 D)) (= G 2) (<= (- A B) 0) (new5 A B C F E))
      (new4 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (and (>= (- A B) 1) (new6 A B C D E))
      (new4 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (new4 A B C D E)
      (new3 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) )
    (=>
      (and (= F 0) (= G 1) (>= H 0) (new3 G H H F E))
      (new2 A B C D E)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) )
    (=>
      (new2 A B C D E)
      new1
    )
  )
)
(assert 
 (=>
      new1
      incorrect
    ))

(assert (not incorrect))
(check-sat)
