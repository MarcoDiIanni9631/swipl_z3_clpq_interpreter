TO- DO 19 set

-cut su una riga per conto suo
-select perche a sinistra/ destra
-il tipo due punti deve esssere accettato in logic utils.
-TESTARE CASO a,b con b che ha piu conjunction
-Smt2map deve avere tutto smtlib, da li mappo bene a uribe con interprete.
-Implies puo arrivare?  -> la freccia
-xor ricontrollare se è accettabile piu di 2
-spostare number,true e false meglio metterli sopra.
-true e false sposto sopra e vedo se catturato
-commentare la clausolemsg.value perche per solidity pora non serve
-implica è indicato con => non con ->
-controllo d= -1+2 o meno 3 FATTO
-TESTARE creare smt_lib che contengo smt minus times,
-Individuare qual'è il predicato che da smt a crea quello che poi viene che 
-sistemare in modod tale che seguo la stessa struttura dell smt-lib (core, ints) tutti insieme raggruppati
-Fare in modo di poter dichiarare quanto ho esplorato dell'albero (ho esplorato tutto l'albero?).
-Fare in modo che il report sia cliccabile
-Cambiare colori di true non derivable (se ha raggiunto maxDepth non ho esplorato tutto quindi non posso dire non derivable verde verde, consistente ma non verde piu grigio diciamo)
-Fare in modo che tutto quello che appare in smt-lib poi venga considerato in stm2map e qujindi poi anche in interprete
-Creare issue per chc-comp24-LIA-Lin-Arrays-008_true.smt2.pl	true	non derivable	✘	 forse ha loop ma non ha controllato tutti i rami? non ha raggiunto maxdepth
-controllare i risultati di z3 della chccomp: https://github.com/chc-comp/chc-comp25-benchmarks/tree/main perche ho diversi unknown per esempio per  LIA LIn
-posso usare il server con conda creo ambiente virutale, lo attivo e poi posso installare z3 prover e swiprolog, posso lanciare analisi li. Gnu-Parallels 	(guardare teams per comandi)
-Aggiornare readMe su come si usa l'interprete.
-Script hardcoded, difficile da far utlizzare a utente esterno, cambiare sia generazione report che usabilità dell'interprete.



